name: Matrix Mapping Processing

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Set Matrix
        id: set-matrix
        run: |
          # Define your mappings here or fetch them from a source
          matrix=$(cat << EOF
          [
            { "name": "mapping1", "value": "test1" },
            { "name": "mapping2", "value": "test2" },
            { "name": "mapping3", "value": "test3" }
          ]
          EOF
          )
          # Escape the matrix for GitHub Actions output
          echo "matrix=$matrix" >> $GITHUB_OUTPUT

  process-mappings:
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      matrix:
        mapping: ${{ fromJson(needs.setup.outputs.matrix) }}
      # Make sure all matrix jobs run even if one fails
      fail-fast: false
    
    steps:
      - name: Process Mapping
        id: process
        run: |
          # Simulate processing of mapping
          processed_value="${{ matrix.mapping.value }}_processed"
          
          # Create a JSON object with the results
          result=$(jq -n \
            --arg name "${{ matrix.mapping.name }}" \
            --arg processed "$processed_value" \
            '{name: $name, processed_value: $processed}')
          
          # Save the result to a file with a unique name
          echo "$result" > result_${{ matrix.mapping.name }}.json
          
      - name: Upload Result
        uses: actions/upload-artifact@v3
        with:
          name: result-${{ matrix.mapping.name }}
          path: result_${{ matrix.mapping.name }}.json
          retention-days: 1

  merge-results:
    needs: [setup, process-mappings]
    runs-on: ubuntu-latest
    steps:
      - name: Download All Results
        uses: actions/download-artifact@v3
        
      - name: Merge Results
        id: merge
        run: |
          # Create an array to hold all results
          echo "[]" > merged_results.json
          
          # Find all result files and merge them
          for result_dir in result-*; do
            if [ -d "$result_dir" ]; then
              result_file="$result_dir/$(ls $result_dir)"
              if [ -f "$result_file" ]; then
                # Merge this result into the array
                jq -s '.[0] + [.[1]]' merged_results.json "$result_file" > tmp.json
                mv tmp.json merged_results.json
              fi
            fi
          done
          
          # Output the merged results
          merged_json=$(cat merged_results.json)
          echo "merged_results=$merged_json" >> $GITHUB_OUTPUT

      - name: Show Merged Results
        run: |
          echo "Merged Results:"
          cat merged_results.json | jq '.'

      